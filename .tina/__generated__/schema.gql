# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  abtest(relativePath: String): Abtest!
  abtestConnection(before: String, after: String, first: Float, last: Float, sort: String): AbtestConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Page | Post | Abtest

type PageSeo {
  title: String
  description: String
}

type PageBlocksHeroActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksHero {
  headline: String
  text: String
  actions: [PageBlocksHeroActions]
  videoSrc: String
}

type PageBlocksFeaturesItemsFeatureMedia {
  src: String
  videoSrc: String
  cli: Boolean
}

type PageBlocksFeaturesItemsFeatureActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksFeaturesItemsFeature {
  headline: String
  text: String
  media: PageBlocksFeaturesItemsFeatureMedia
  actions: [PageBlocksFeaturesItemsFeatureActions]
}

union PageBlocksFeaturesItems = PageBlocksFeaturesItemsFeature

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
}

type PageBlocksFlyingActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksFlying {
  headline: String
  text: String
  actions: [PageBlocksFlyingActions]
}

type PageBlocksPricingTierOneActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksPricingTierOne {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierOneActions]
}

type PageBlocksPricingTierTwoActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksPricingTierTwo {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierTwoActions]
}

type PageBlocksPricingTierThreeActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksPricingTierThree {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierThreeActions]
}

type PageBlocksPricingTierFourActions {
  label: String
  icon: Boolean
  variant: String
  url: String
}

type PageBlocksPricingTierFour {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierFourActions]
}

type PageBlocksPricing {
  intro: JSON
  tierOne: PageBlocksPricingTierOne
  segue: JSON
  tierTwo: PageBlocksPricingTierTwo
  tierThree: PageBlocksPricingTierThree
  tierFour: PageBlocksPricingTierFour
}

type PageBlocksFaqQuestions {
  question: String
  answer: JSON
}

type PageBlocksFaq {
  title: String
  intro: JSON
  questions: [PageBlocksFaqQuestions]
  color: String
}

type PageBlocksContentOptions {
  narrow: Boolean
  color: String
  align: String
}

type PageBlocksContent {
  options: PageBlocksContentOptions
  content: JSON
}

type PageBlocksShowcaseItemsProjectMedia {
  src: String
}

type PageBlocksShowcaseItemsProject {
  headline: String
  text: String
  url: String
  media: PageBlocksShowcaseItemsProjectMedia
}

union PageBlocksShowcaseItems = PageBlocksShowcaseItemsProject

type PageBlocksShowcase {
  items: [PageBlocksShowcaseItems]
}

type PageBlocksColumnsOptions {
  columns: String
  narrow: Boolean
  color: String
  align: String
}

type PageBlocksColumns {
  options: PageBlocksColumnsOptions
  columnOne: JSON
  columnTwo: JSON
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksFlying | PageBlocksPricing | PageBlocksFaq | PageBlocksContent | PageBlocksShowcase | PageBlocksColumns

type Page implements Node & Document {
  seo: PageSeo
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostPrev = Post

union PostNext = Post

type Post implements Node & Document {
  title: String
  date: String
  last_edited: String
  author: String
  prev: PostPrev
  next: PostNext
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AbtestTestsVariants {
  testId: String
  href: String
}

type AbtestTests {
  testId: String
  href: String
  variants: [AbtestTestsVariants]
}

type Abtest implements Node & Document {
  tests: [AbtestTests]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AbtestConnectionEdges {
  cursor: String!
  node: Abtest
}

type AbtestConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AbtestConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAbtest(relativePath: String!, params: AbtestMutation!): Abtest!
  createAbtest(relativePath: String!, params: AbtestMutation!): Abtest!
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  abtest: AbtestMutation
}

input PageSeoMutation {
  title: String
  description: String
}

input PageBlocksHeroActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksHeroMutation {
  headline: String
  text: String
  actions: [PageBlocksHeroActionsMutation]
  videoSrc: String
}

input PageBlocksFeaturesItemsFeatureMediaMutation {
  src: String
  videoSrc: String
  cli: Boolean
}

input PageBlocksFeaturesItemsFeatureActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksFeaturesItemsFeatureMutation {
  headline: String
  text: String
  media: PageBlocksFeaturesItemsFeatureMediaMutation
  actions: [PageBlocksFeaturesItemsFeatureActionsMutation]
}

input PageBlocksFeaturesItemsMutation {
  feature: PageBlocksFeaturesItemsFeatureMutation
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
}

input PageBlocksFlyingActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksFlyingMutation {
  headline: String
  text: String
  actions: [PageBlocksFlyingActionsMutation]
}

input PageBlocksPricingTierOneActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksPricingTierOneMutation {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierOneActionsMutation]
}

input PageBlocksPricingTierTwoActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksPricingTierTwoMutation {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierTwoActionsMutation]
}

input PageBlocksPricingTierThreeActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksPricingTierThreeMutation {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierThreeActionsMutation]
}

input PageBlocksPricingTierFourActionsMutation {
  label: String
  icon: Boolean
  variant: String
  url: String
}

input PageBlocksPricingTierFourMutation {
  name: String
  price: String
  interval: String
  body: JSON
  large: Boolean
  actions: [PageBlocksPricingTierFourActionsMutation]
}

input PageBlocksPricingMutation {
  intro: JSON
  tierOne: PageBlocksPricingTierOneMutation
  segue: JSON
  tierTwo: PageBlocksPricingTierTwoMutation
  tierThree: PageBlocksPricingTierThreeMutation
  tierFour: PageBlocksPricingTierFourMutation
}

input PageBlocksFaqQuestionsMutation {
  question: String
  answer: JSON
}

input PageBlocksFaqMutation {
  title: String
  intro: JSON
  questions: [PageBlocksFaqQuestionsMutation]
  color: String
}

input PageBlocksContentOptionsMutation {
  narrow: Boolean
  color: String
  align: String
}

input PageBlocksContentMutation {
  options: PageBlocksContentOptionsMutation
  content: JSON
}

input PageBlocksShowcaseItemsProjectMediaMutation {
  src: String
}

input PageBlocksShowcaseItemsProjectMutation {
  headline: String
  text: String
  url: String
  media: PageBlocksShowcaseItemsProjectMediaMutation
}

input PageBlocksShowcaseItemsMutation {
  project: PageBlocksShowcaseItemsProjectMutation
}

input PageBlocksShowcaseMutation {
  items: [PageBlocksShowcaseItemsMutation]
}

input PageBlocksColumnsOptionsMutation {
  columns: String
  narrow: Boolean
  color: String
  align: String
}

input PageBlocksColumnsMutation {
  options: PageBlocksColumnsOptionsMutation
  columnOne: JSON
  columnTwo: JSON
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  flying: PageBlocksFlyingMutation
  pricing: PageBlocksPricingMutation
  faq: PageBlocksFaqMutation
  content: PageBlocksContentMutation
  showcase: PageBlocksShowcaseMutation
  columns: PageBlocksColumnsMutation
}

input PageMutation {
  seo: PageSeoMutation
  blocks: [PageBlocksMutation]
}

input PostMutation {
  title: String
  date: String
  last_edited: String
  author: String
  prev: String
  next: String
  body: JSON
}

input AbtestTestsVariantsMutation {
  testId: String
  href: String
}

input AbtestTestsMutation {
  testId: String
  href: String
  variants: [AbtestTestsVariantsMutation]
}

input AbtestMutation {
  tests: [AbtestTestsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  